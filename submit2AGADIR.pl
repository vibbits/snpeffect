#!/usr/bin/perl
# This script has been written by BioinformaticsCore for switchLab
# It lets AGADIR investigate the effect op mutations on protein aggregation,
#   by running TANGO and WALTZ on the reference and the mutated sequence.
# It can best be run on the cluster
# It takes as input :
#   - variants.tab (which merely serves as a guide)
#   - reference_sequences.fa and mutated_sequences.fa generated by
#     snpEff and parseSnpEfffasta.pl
#   - the file Options.txt
#   - mutated_domains.tab, with the position of the domain that contains
#     the mutation
# It writes as output 6 files with info about found regions ("windows"),
# 3 for the reference and 3 for the mutant, with the output of TANGO,
# the output of WALTZ and a summary.
# It also parses the per residue output of TANGO and WALTZ and writes a
# file domain_differences_AGADIR.tab with the sum of the per residue
# TANGO and WALTZ score for the protein domain that contains the mutation.
# This will have to be merged into the final report.
#
# NOTE : since AGADIR runs quite fast, we have not tried to avoid the
# redundant analysis of reference sequences ; this would make the
# script more comlex, with little to be gained.

$agadir = $ARGV[0];
if (not $agadir or $agadir !~ /[^\/].*agadir.*$/) {
  die "script submit2AGADIR.pl needs AGADIR as first argument\n"
}
#$agadir = '/switchlab/group/tools/agawrapper2016_2/agadirwrapper';

# test if we have everything needed
if (not -e "$agadir") { die "$agadir not found\n" }
if (not -e 'Options.txt') { &setflag ; die "Options.txt not found\n" }

# read in information about domain that contains mutation
open IN, '../mutated_domains.tab' or die "cannot open mutated_domains.tab\n";
while (<IN>) {
  if (not /^(\d+)\t([^\t]+)\t([^\t]+)\t(\d+)\t(\d+)\t(\d+)$/) {
    die "error in file mutated_domains.tab :\n$_\n";
  } else { # $1 is Nvar
    $begindomain{$1} = $4;
    $enddomain{$1} = $5;
  }
}
close IN;

open VAR, 'variants.tab' or die "cannot open variants.tab\n";
open REF, 'reference_sequences.fa' or die "cannot open reference_sequences.fa\n";
open MUT, 'mutated_sequences.fa' or die "cannot open mutated_sequences.fa\n";
open DOMAINOUT, '>domain_differences_AGADIR.tab';

while(<VAR>) {
  $_ =~ /(\d+)\t/;
  $N = $1;
  print DOMAINOUT $N;

  $line = <REF>;
  $line =~ /^>(\d+)\t/;
  $Nref = $1;
  if ($Nref != $N) {
    &setflag;
    die "variant $N in variants.tab and variant $Nref in reference_sequences.fa do not match\n";
  }
  open SEQ, '>tempseq.fa';
  print SEQ ">$Nref\n";
  $line = <REF>;
  print SEQ $line;
  close SEQ;
  $void = `$agadir tempseq.fa`;
  system `cat PSX_tangowindow.out >> reference_TANGO.tab`;
  system `cat PSX_waltzwindow.out >> reference_WALTZ.tab`;
  system `cat PSX_wins_per_seq.out >> reference_AGADIR_summary.tab`;
  $tangorefdomainscore = '.' ; $waltzrefdomainscore = '.';
  if (exists $begindomain{$N}) {
    $tangorefdomainscore = 0 ; $waltzrefdomainscore = 0;
    $BEGIN = $begindomain{$N} ; $END = $enddomain{$N};
    open IN, 'PSX_tangoresidue.out';
    <IN>; # skip header
    while (<IN>) {
      if (not /^${N}\t(\d+)\t[A-Z]\t(.+)$/) {
        &setflag;
        die "error in file PSX_tangoresidue.out :\n$_\n";
      }
      if ($1 >= $BEGIN and $1 <= $END) {
        $tangorefdomainscore += $2;
      }
    }
    close IN;
    if ($tangorefdomainscore == 0) { $tangorefdomainscore eq '.' }
    open IN, 'PSX_waltzresidue.out';
    <IN>; # skip header
    while (<IN>) {
      if (not /^${N}\t(\d+)\t[A-Z]\t(.+)$/) {
        &setflag;
        die "error in file PSX_waltzresidue.out :\n$_\n";
      }
      if ($1 >= $BEGIN and $1 <= $END) {
        $waltzrefdomainscore += $2;
      }
    }
    close IN;
    if ($waltzrefdomainscore == 0) { $waltzrefdomainscore eq '.' }
  }
  print DOMAINOUT "\t$tangorefdomainscore\t$waltzrefdomainscore";

  $line = <MUT>;
  $line =~ /^>(\d+)\t/;
  $Nref = $1;
  if ($Nref != $N) {
    &setflag;
    die "variant $N in variants.tab and variant $Nref in mutated_sequences.fa do not match\n";
  }
  open SEQ, '>tempseq.fa';
  print SEQ ">$Nref\n";
  $line = <MUT>;
  print SEQ $line;
  close SEQ;
  $void = `$agadir tempseq.fa`;
  system `cat PSX_tangowindow.out >> mutated_TANGO.tab`;
  system `cat PSX_waltzwindow.out >> mutated_WALTZ.tab`;
  system `cat PSX_wins_per_seq.out >> mutated_AGADIR_summary.tab`;
  $tangomutdomainscore = '.' ; $waltzmutdomainscore = '.';
  if (exists $begindomain{$N}) {
    $tangomutdomainscore = 0 ; $waltzmutdomainscore = 0;
    $BEGIN = $begindomain{$N} ; $END = $enddomain{$N};
    open IN, 'PSX_tangoresidue.out';
    <IN>; # skip header
    while (<IN>) {
      if (not /^${N}\t(\d+)\t[A-Z]\t(.+)$/) {
        &setflag;
        die "error in file PSX_tangoresidue.out :\n$_\n";
      }
      if ($1 >= $BEGIN and $1 <= $END) {
        $tangomutdomainscore += $2;
      }
    }
    close IN;
    if ($tangomutdomainscore == 0) { $tangomutdomainscore eq '.' }
    open IN, 'PSX_waltzresidue.out';
    <IN>; # skip header
    while (<IN>) {
      if (not /^${N}\t(\d+)\t[A-Z]\t(.+)$/) {
        &setflag;
        die "error in file PSX_waltzresidue.out :\n$_\n";
      }
      if ($1 >= $BEGIN and $1 <= $END) {
        $waltzmutdomainscore += $2;
      }
    }
    close IN;
    if ($waltzmutdomainscore == 0) { $waltzmutdomainscore eq '.' }
  }
  print DOMAINOUT "\t$tangomutdomainscore\t$waltzmutdomainscore\n";
}

# terminate
unlink 'justhexa.txt', 'PSX_tangowindow.out', 'PSX_waltzwindow.out',
  'PSX_wins_per_seq.out', 'PSX_tangoresidue.out', 'PSX_waltzresidue.out',
  'tempseq.fa';
&setflag;

sub setflag {
  # to indicate that script has terminated, notwithstanding it crashed or
  # ended normally ; useful if script is started under a masterscript
  open FLAG, '>flag.AGADIR';
  close FLAG;
}
