#!/usr/bin/perl
# This script has been written by BioinformaticsCore for switchLab
# It lets SIFT and PROVEAN estimate the effect of a mutation on a ptotein
# sequence. It can best be run on the cluster.
# It takes as input :
#   - variants, a table with just the transcipt ID and the mutationstring
#     (derived from variants.tab by running splitreferences4predictors.pl)
#   - reference_sequences_nonredundant.fa generated by snpEff and
#     parseSnpEfffasta.pl
# It makes as output :
#   - SIFT_PROVEAN.tab with the verdict and main scores of SIFT and PROVEAN
#   - SIFT_warnings.txt with nonmutated amino acids that according to
#     SIFT are poorly preserved
# Note that SIFT and PROVEAN need different temporary directories since
# PROVEAN automatically clears the content of its TMP before is runs

#$siftdir = '/switchlab/group/guybot/sift6.2.1';
$siftdir = $ARGV[0];
if (not $siftdir or $siftdir !~ /sift/) {
  die "script runpredictors.pl needs SIFT folder as first argument\n";
}
#$blastdir = '/switchlab/group/guybot/ncbi-blast-2.4.0+';
$blastdir = $ARGV[1];
if (not $blastdir or $blastdir !~ /ncbi-blast/) {
  die "script runpredictors.pl needs BLAST 2.4 folder as second argument\n";
}
#$uniref90 = '/switchlab/group/guybot/UniRef/uniref90.fa';
$uniref90 = $ARGV[2];
if (not $uniref90 or $uniref90 !~ /uniref90/) {
  die "script runpredictors.pl needs a UniRef90 BLAST DB as third argument\n";
}
#$provean = '/switchlab/group/guybot/provean-1.1.5/bin/provean.sh';
$provean = $ARGV[3];
if (not $provean or $provean !~ /provean.sh/) {
  die "script runpredictors.pl needs the PROVEAN executable as fourth argument\n";
}

# set the environment variables used by SIFT
$ENV{SIFT_DIR} = "$siftdir";
$ENV{BLIMPS_DIR} = "$siftdir/blimps";
$ENV{NCBI} = "$blastdir/bin";
$ENV{tmpdir} = './SIFT_TMP';
if (not -e SIFT_TMP) { mkdir 'SIFT_TMP' };

if (not -e PROVEAN_TMP) { mkdir 'PROVEAN_TMP' };

# run SIFT and PROVEAN. If there are several mutations in the same transcript,
# the time-consuming making of a multiple seqeunce alignment is done only
# once and the evaluation is done on a preserved alignment/model.
open VAR, 'variants' or die "cannot open variants\n";
open SEQ, 'reference_sequences_nonredundant.fa' or die "cannot open reference_sequences_nonredundant.fa\n";
open OUT, '>SIFT_PROVEAN.tab';
open SIFTWARN, '>SIFT_warnings.txt';
open SIFTERR, '>SIFT_errors.txt';
while (<VAR>) {
  if (not /^([\w\.]+)\t([A-Z]\d+[A-Z])$/) {
    &setflag;
    die "error in file variants.tab :\n$_\n";
  }
  $mutationstring = $2;
  open TEMPOUT, '>mutationstring';
  print TEMPOUT "$mutationstring\n";
  close TEMPOUT;

  if ($transcriptID eq $1) { # use existing alignment/model
    system "$provean -q tempseq.fa -v mutationstring --tmp_dir PROVEAN_TMP --supporting_set provean_set > provean_output";
    if (not $SIFTerrorfile) {
      system "$ENV{SIFT_DIR}/bin/info_on_seqs ./SIFT_TMP/tempseq.alignedfasta mutationstring sift_output 2> stderr.txt";
    }
  } else {
    $transcriptID = $1;
    $line = <SEQ>;
    $line =~ /^>(.*)$/;
    if ($1 ne $transcriptID) {
      &setflag;
      die "mismatch between $transcriptID in variants and $1 in reference_sequences_nonredundant.fa\n";
    }
    open TEMPOUT, '>tempseq.fa';
    print TEMPOUT $line;
    $line = <SEQ>;
    print TEMPOUT $line;
    close TEMPOUT;
    system "$provean -q tempseq.fa -v mutationstring --tmp_dir PROVEAN_TMP --save_supporting_set provean_set > provean_output";
    system 'rm -fr ./SIFT_TMP/* &> /dev/null';
    unlink 'sift_output';
    $SIFTerrorfile = '';
      # instead of checking that SIFT_TMP/tempseq.alignedfasta is there,
      # we will look at a file that indicates that something went wrong
    system "$ENV{SIFT_DIR}/bin/seqs_chosen_via_median_info.csh tempseq.fa $uniref90 2.75 2> /dev/null";
    if (-e './SIFT_TMP/tempseq.fa.query.globalX.error') {
      # could not find enough sequences to make good alignment
      $SIFTerrorfile = './SIFT_TMP/tempseq.fa.query.globalX.error';
    } elsif (-e './SIFT_TMP/tempseq.time.error') {
      # sequence was too long and search bumped on time-out
      # MAYBE WE SHOULD RUN THE ANALYSIS WITH ONLY THE PART OF THE SEQUENCE
      # (500 AA) THAT HAS THE MUTATION
      $SIFTerrorfile = './SIFT_TMP/tempseq.time.error';
    } else {
      system "$ENV{SIFT_DIR}/bin/info_on_seqs ./SIFT_TMP/tempseq.alignedfasta mutationstring sift_output 2> stderr.txt";
    }
  }

  print OUT "$transcriptID\t$mutationstring";
  # parse SIFT output
  if ($SIFTerrorfile) {
    print OUT "\t.\t.\t.\t.";
    print SIFTERR "$transcriptID  $mutationstring :\n";
    open TEMPIN, "$SIFTerrorfile";
    while (<TEMPIN>) {
      print SIFTERR;
    }
    close TEMPIN;
  } else {
    $siftwarnings = '';
    open TEMPIN, 'sift_output' or die "cannot open sift_output for $transcriptID $mutationstring\n";;
    while (<TEMPIN>) {
      if (/^WARNING/) {
        $siftwarnings .= $_;
      } elsif (/^$mutationstring\t(.+)\t([\d\.]+)\t([\d\.]+)\t(\d+)\t(\d+)$/) {
        print OUT "\t$1\t$2\t$3\t$4\/$5";
      } elsif (/^$mutationstring\tNOT SCORED/) {
        print OUT "\t.\t.\t.\t.";
        print SIFTERR "$transcriptID  $mutationstring :\n";
        print SIFTERR "could not be scored\n";
      } else {
        &setflag;
        die "output SIFT for $transcriptID $mutationstring does not look correct\n";
      }
    }
    close TEMPIN;
    if ($siftwarnings) {
      print SIFTWARN "$transcriptID  $mutationstring :\n$siftwarnings";
    }
  }

  # parse PROVEAN output
  open TEMPIN, 'provean_output' or die "cannot open provean_output for $transcriptID $mutationstring\n";;
  while (<TEMPIN>) {
    # go to last line
    $provean_output_lastline = $_;
  }
  close TEMPIN;
  if ($provean_output_lastline !~ /^$mutationstring\t([\d\.-]+)$/) {
    &setflag;
    die "output PROVEAN for $transcriptID  $mutationstring does not look correct\n";
  }
  if ($1 <= -2.5) {
    print OUT "\tdeleterious\t$1";
  } else {
    print OUT "\tharmless\t$1";
  }
  print OUT "\n";
}

# terminate
&setflag;

sub setflag {
  # to indicate that script has terminated, notwithstanding it crashed or
  # ended normally ; useful if script is started under a masterscript
  open FLAG, '>flag.SIFT';
  close FLAG;
}
